// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package common

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB7188a36DecodeMegucaCommon(in *jlexer.Lexer, out *ImageCommon) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apng":
			out.APNG = bool(in.Bool())
		case "audio":
			out.Audio = bool(in.Bool())
		case "video":
			out.Video = bool(in.Bool())
		case "fileType":
			out.FileType = uint8(in.Uint8())
		case "thumbType":
			out.ThumbType = uint8(in.Uint8())
		case "length":
			out.Length = uint32(in.Uint32())
		case "dims":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 4 {
						(out.Dims)[v1] = uint16(in.Uint16())
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "size":
			out.Size = int(in.Int())
		case "artist":
			out.Artist = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "MD5":
			out.MD5 = string(in.String())
		case "SHA1":
			out.SHA1 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7188a36EncodeMegucaCommon(out *jwriter.Writer, in ImageCommon) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APNG {
		const prefix string = ",\"apng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.APNG))
	}
	if in.Audio {
		const prefix string = ",\"audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Audio))
	}
	if in.Video {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Video))
	}
	{
		const prefix string = ",\"fileType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.FileType))
	}
	{
		const prefix string = ",\"thumbType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ThumbType))
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Length))
	}
	{
		const prefix string = ",\"dims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v2 := range in.Dims {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Uint16(uint16((in.Dims)[v2]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	if in.Artist != "" {
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"MD5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5))
	}
	{
		const prefix string = ",\"SHA1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA1))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageCommon) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7188a36EncodeMegucaCommon(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageCommon) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7188a36DecodeMegucaCommon(l, v)
}
func easyjsonB7188a36DecodeMegucaCommon1(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spoiler":
			out.Spoiler = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "apng":
			out.APNG = bool(in.Bool())
		case "audio":
			out.Audio = bool(in.Bool())
		case "video":
			out.Video = bool(in.Bool())
		case "fileType":
			out.FileType = uint8(in.Uint8())
		case "thumbType":
			out.ThumbType = uint8(in.Uint8())
		case "length":
			out.Length = uint32(in.Uint32())
		case "dims":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v3 := 0
				for !in.IsDelim(']') {
					if v3 < 4 {
						(out.Dims)[v3] = uint16(in.Uint16())
						v3++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "size":
			out.Size = int(in.Int())
		case "artist":
			out.Artist = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "MD5":
			out.MD5 = string(in.String())
		case "SHA1":
			out.SHA1 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7188a36EncodeMegucaCommon1(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spoiler {
		const prefix string = ",\"spoiler\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spoiler))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.APNG {
		const prefix string = ",\"apng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.APNG))
	}
	if in.Audio {
		const prefix string = ",\"audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Audio))
	}
	if in.Video {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Video))
	}
	{
		const prefix string = ",\"fileType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.FileType))
	}
	{
		const prefix string = ",\"thumbType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ThumbType))
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Length))
	}
	{
		const prefix string = ",\"dims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v4 := range in.Dims {
			if v4 > 0 {
				out.RawByte(',')
			}
			out.Uint16(uint16((in.Dims)[v4]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	if in.Artist != "" {
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"MD5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5))
	}
	{
		const prefix string = ",\"SHA1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA1))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Image) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7188a36EncodeMegucaCommon1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Image) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7188a36DecodeMegucaCommon1(l, v)
}
