// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package common

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc9e8747DecodeMegucaCommon(in *jlexer.Lexer, out *Thread) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "abbrev":
			out.Abbrev = bool(in.Bool())
		case "sticky":
			out.Sticky = bool(in.Bool())
		case "locked":
			out.Locked = bool(in.Bool())
		case "postCtr":
			out.PostCtr = uint32(in.Uint32())
		case "imageCtr":
			out.ImageCtr = uint32(in.Uint32())
		case "replyTime":
			out.ReplyTime = int64(in.Int64())
		case "bumpTime":
			out.BumpTime = int64(in.Int64())
		case "subject":
			out.Subject = string(in.String())
		case "board":
			out.Board = string(in.String())
		case "posts":
			if in.IsNull() {
				in.Skip()
				out.Posts = nil
			} else {
				in.Delim('[')
				if out.Posts == nil {
					if !in.IsDelim(']') {
						out.Posts = make([]Post, 0, 1)
					} else {
						out.Posts = []Post{}
					}
				} else {
					out.Posts = (out.Posts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Post
					(v1).UnmarshalEasyJSON(in)
					out.Posts = append(out.Posts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "editing":
			out.Editing = bool(in.Bool())
		case "sage":
			out.Sage = bool(in.Bool())
		case "id":
			out.ID = uint64(in.Uint64())
		case "time":
			out.Time = int64(in.Int64())
		case "body":
			out.Body = string(in.String())
		case "flag":
			out.Flag = string(in.String())
		case "posterID":
			out.PosterID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "trip":
			out.Trip = string(in.String())
		case "auth":
			out.Auth = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(Image)
				}
				(*out.Image).UnmarshalEasyJSON(in)
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]Link, 0, 2)
					} else {
						out.Links = []Link{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Link
					(v2).UnmarshalEasyJSON(in)
					out.Links = append(out.Links, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]Command, 0, 1)
					} else {
						out.Commands = []Command{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Command
					if data := in.Raw(); in.Ok() {
						in.AddError((v3).UnmarshalJSON(data))
					}
					out.Commands = append(out.Commands, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "moderaion":
			if in.IsNull() {
				in.Skip()
				out.Moderation = nil
			} else {
				in.Delim('[')
				if out.Moderation == nil {
					if !in.IsDelim(']') {
						out.Moderation = make([]ModerationEntry, 0, 1)
					} else {
						out.Moderation = []ModerationEntry{}
					}
				} else {
					out.Moderation = (out.Moderation)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ModerationEntry
					easyjsonDc9e8747DecodeMegucaCommon1(in, &v4)
					out.Moderation = append(out.Moderation, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeMegucaCommon(out *jwriter.Writer, in Thread) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Abbrev {
		const prefix string = ",\"abbrev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Abbrev))
	}
	if in.Sticky {
		const prefix string = ",\"sticky\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Sticky))
	}
	if in.Locked {
		const prefix string = ",\"locked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Locked))
	}
	{
		const prefix string = ",\"postCtr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.PostCtr))
	}
	{
		const prefix string = ",\"imageCtr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ImageCtr))
	}
	{
		const prefix string = ",\"replyTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReplyTime))
	}
	{
		const prefix string = ",\"bumpTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BumpTime))
	}
	{
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	{
		const prefix string = ",\"board\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Board))
	}
	{
		const prefix string = ",\"posts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Posts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Posts {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Editing {
		const prefix string = ",\"editing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editing))
	}
	if in.Sage {
		const prefix string = ",\"sage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Sage))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	if in.Flag != "" {
		const prefix string = ",\"flag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Flag))
	}
	if in.PosterID != "" {
		const prefix string = ",\"posterID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Trip != "" {
		const prefix string = ",\"trip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Trip))
	}
	if in.Auth != "" {
		const prefix string = ",\"auth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Auth))
	}
	if in.Image != nil {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Image).MarshalEasyJSON(out)
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Links {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Commands) != 0 {
		const prefix string = ",\"commands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Commands {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Moderation) != 0 {
		const prefix string = ",\"moderaion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Moderation {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonDc9e8747EncodeMegucaCommon1(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Thread) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeMegucaCommon(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Thread) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeMegucaCommon(l, v)
}
func easyjsonDc9e8747DecodeMegucaCommon1(in *jlexer.Lexer, out *ModerationEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ModerationAction(in.Uint8())
		case "length":
			out.Length = uint64(in.Uint64())
		case "by":
			out.By = string(in.String())
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeMegucaCommon1(out *jwriter.Writer, in ModerationEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	{
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Length))
	}
	{
		const prefix string = ",\"by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.By))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	out.RawByte('}')
}
func easyjsonDc9e8747DecodeMegucaCommon2(in *jlexer.Lexer, out *StandalonePost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.OP = uint64(in.Uint64())
		case "board":
			out.Board = string(in.String())
		case "editing":
			out.Editing = bool(in.Bool())
		case "sage":
			out.Sage = bool(in.Bool())
		case "id":
			out.ID = uint64(in.Uint64())
		case "time":
			out.Time = int64(in.Int64())
		case "body":
			out.Body = string(in.String())
		case "flag":
			out.Flag = string(in.String())
		case "posterID":
			out.PosterID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "trip":
			out.Trip = string(in.String())
		case "auth":
			out.Auth = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(Image)
				}
				(*out.Image).UnmarshalEasyJSON(in)
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]Link, 0, 2)
					} else {
						out.Links = []Link{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Link
					(v13).UnmarshalEasyJSON(in)
					out.Links = append(out.Links, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]Command, 0, 1)
					} else {
						out.Commands = []Command{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v14 Command
					if data := in.Raw(); in.Ok() {
						in.AddError((v14).UnmarshalJSON(data))
					}
					out.Commands = append(out.Commands, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "moderaion":
			if in.IsNull() {
				in.Skip()
				out.Moderation = nil
			} else {
				in.Delim('[')
				if out.Moderation == nil {
					if !in.IsDelim(']') {
						out.Moderation = make([]ModerationEntry, 0, 1)
					} else {
						out.Moderation = []ModerationEntry{}
					}
				} else {
					out.Moderation = (out.Moderation)[:0]
				}
				for !in.IsDelim(']') {
					var v15 ModerationEntry
					easyjsonDc9e8747DecodeMegucaCommon1(in, &v15)
					out.Moderation = append(out.Moderation, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeMegucaCommon2(out *jwriter.Writer, in StandalonePost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.OP))
	}
	{
		const prefix string = ",\"board\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Board))
	}
	if in.Editing {
		const prefix string = ",\"editing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editing))
	}
	if in.Sage {
		const prefix string = ",\"sage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Sage))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	if in.Flag != "" {
		const prefix string = ",\"flag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Flag))
	}
	if in.PosterID != "" {
		const prefix string = ",\"posterID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Trip != "" {
		const prefix string = ",\"trip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Trip))
	}
	if in.Auth != "" {
		const prefix string = ",\"auth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Auth))
	}
	if in.Image != nil {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Image).MarshalEasyJSON(out)
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Links {
				if v16 > 0 {
					out.RawByte(',')
				}
				(v17).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Commands) != 0 {
		const prefix string = ",\"commands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Commands {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Moderation) != 0 {
		const prefix string = ",\"moderaion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Moderation {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjsonDc9e8747EncodeMegucaCommon1(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StandalonePost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeMegucaCommon2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StandalonePost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeMegucaCommon2(l, v)
}
func easyjsonDc9e8747DecodeMegucaCommon3(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "editing":
			out.Editing = bool(in.Bool())
		case "sage":
			out.Sage = bool(in.Bool())
		case "id":
			out.ID = uint64(in.Uint64())
		case "time":
			out.Time = int64(in.Int64())
		case "body":
			out.Body = string(in.String())
		case "flag":
			out.Flag = string(in.String())
		case "posterID":
			out.PosterID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "trip":
			out.Trip = string(in.String())
		case "auth":
			out.Auth = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(Image)
				}
				(*out.Image).UnmarshalEasyJSON(in)
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]Link, 0, 2)
					} else {
						out.Links = []Link{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Link
					(v22).UnmarshalEasyJSON(in)
					out.Links = append(out.Links, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]Command, 0, 1)
					} else {
						out.Commands = []Command{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Command
					if data := in.Raw(); in.Ok() {
						in.AddError((v23).UnmarshalJSON(data))
					}
					out.Commands = append(out.Commands, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "moderaion":
			if in.IsNull() {
				in.Skip()
				out.Moderation = nil
			} else {
				in.Delim('[')
				if out.Moderation == nil {
					if !in.IsDelim(']') {
						out.Moderation = make([]ModerationEntry, 0, 1)
					} else {
						out.Moderation = []ModerationEntry{}
					}
				} else {
					out.Moderation = (out.Moderation)[:0]
				}
				for !in.IsDelim(']') {
					var v24 ModerationEntry
					easyjsonDc9e8747DecodeMegucaCommon1(in, &v24)
					out.Moderation = append(out.Moderation, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeMegucaCommon3(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Editing {
		const prefix string = ",\"editing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editing))
	}
	if in.Sage {
		const prefix string = ",\"sage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Sage))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	if in.Flag != "" {
		const prefix string = ",\"flag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Flag))
	}
	if in.PosterID != "" {
		const prefix string = ",\"posterID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Trip != "" {
		const prefix string = ",\"trip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Trip))
	}
	if in.Auth != "" {
		const prefix string = ",\"auth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Auth))
	}
	if in.Image != nil {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Image).MarshalEasyJSON(out)
	}
	if len(in.Links) != 0 {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Links {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Commands) != 0 {
		const prefix string = ",\"commands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.Commands {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Moderation) != 0 {
		const prefix string = ",\"moderaion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Moderation {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjsonDc9e8747EncodeMegucaCommon1(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeMegucaCommon3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeMegucaCommon3(l, v)
}
func easyjsonDc9e8747DecodeMegucaCommon4(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "op":
			out.OP = uint64(in.Uint64())
		case "board":
			out.Board = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeMegucaCommon4(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"op\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.OP))
	}
	{
		const prefix string = ",\"board\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Board))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeMegucaCommon4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeMegucaCommon4(l, v)
}
func easyjsonDc9e8747DecodeMegucaCommon5(in *jlexer.Lexer, out *Board) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pages":
			out.Pages = int(in.Int())
		case "threads":
			if in.IsNull() {
				in.Skip()
				out.Threads = nil
			} else {
				in.Delim('[')
				if out.Threads == nil {
					if !in.IsDelim(']') {
						out.Threads = make([]Thread, 0, 1)
					} else {
						out.Threads = []Thread{}
					}
				} else {
					out.Threads = (out.Threads)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Thread
					(v31).UnmarshalEasyJSON(in)
					out.Threads = append(out.Threads, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeMegucaCommon5(out *jwriter.Writer, in Board) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pages))
	}
	{
		const prefix string = ",\"threads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Threads == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Threads {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Board) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeMegucaCommon5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Board) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeMegucaCommon5(l, v)
}
