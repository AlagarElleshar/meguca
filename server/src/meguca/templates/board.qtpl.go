// This file is automatically generated by qtc from "board.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line board.qtpl:1
package templates

//line board.qtpl:1
import "strconv"

//line board.qtpl:2
import "fmt"

//line board.qtpl:3
import "meguca/config"

//line board.qtpl:4
import "meguca/common"

//line board.qtpl:5
import "meguca/lang"

//line board.qtpl:6
import "meguca/auth"

//line board.qtpl:7
import "meguca/imager/assets"

//line board.qtpl:8
import ass "meguca/assets"

//line board.qtpl:10
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line board.qtpl:10
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line board.qtpl:10
func streamrenderBoard(qw422016 *qt422016.Writer, threadHTML []byte, id, title string, conf config.BoardConfContainer, page, total int, pos auth.ModerationLevel, catalog bool) {
	//line board.qtpl:11
	ln := lang.Get()

	//line board.qtpl:12
	bannerID, mime, ok := ass.Banners.Random(conf.ID)

	//line board.qtpl:13
	if ok {
		//line board.qtpl:13
		qw422016.N().S(`<h1 class="image-banner">`)
		//line board.qtpl:15
		streamasset(qw422016, fmt.Sprintf("/assets/banners/%s/%d", conf.ID, bannerID), mime)
		//line board.qtpl:15
		qw422016.N().S(`</h1>`)
		//line board.qtpl:17
	}
	//line board.qtpl:17
	qw422016.N().S(`<h1 id="page-title">`)
	//line board.qtpl:19
	qw422016.N().S(title)
	//line board.qtpl:19
	qw422016.N().S(`</h1><span class="aside-container"><aside id="thread-form-container" class="glass"><span class="act"><a class="new-thread-button">`)
	//line board.qtpl:25
	qw422016.N().S(ln.Common.UI["newThread"])
	//line board.qtpl:25
	qw422016.N().S(`</a></span><form id="new-thread-form" action="/api/create-thread" method="post" enctype="multipart/form-data" class="hidden">`)
	//line board.qtpl:29
	if id == "all" {
		//line board.qtpl:29
		qw422016.N().S(`<select name="board" required>`)
		//line board.qtpl:31
		for _, b := range config.GetBoardTitles() {
			//line board.qtpl:32
			if b.ID == "all" {
				//line board.qtpl:33
				continue
				//line board.qtpl:34
			}
			//line board.qtpl:34
			qw422016.N().S(`<option value="`)
			//line board.qtpl:35
			qw422016.N().S(b.ID)
			//line board.qtpl:35
			qw422016.N().S(`">`)
			//line board.qtpl:36
			streamformatTitle(qw422016, b.ID, b.Title)
			//line board.qtpl:36
			qw422016.N().S(`</option>`)
			//line board.qtpl:38
		}
		//line board.qtpl:38
		qw422016.N().S(`</select><br>`)
		//line board.qtpl:41
	} else {
		//line board.qtpl:41
		qw422016.N().S(`<input type="text" name="board" value="`)
		//line board.qtpl:42
		qw422016.N().S(conf.ID)
		//line board.qtpl:42
		qw422016.N().S(`" hidden>`)
		//line board.qtpl:43
	}
	//line board.qtpl:43
	qw422016.N().S(`<input name="subject" placeholder="`)
	//line board.qtpl:44
	qw422016.N().S(ln.UI["subject"])
	//line board.qtpl:44
	qw422016.N().S(`" required type="text" maxlength="100"><br>`)
	//line board.qtpl:46
	streamnoscriptPostCreationFields(qw422016, pos)
	//line board.qtpl:47
	if id == "all" || !conf.TextOnly {
		//line board.qtpl:48
		streamuploadForm(qw422016)
		//line board.qtpl:49
	}
	//line board.qtpl:50
	streamcaptcha(qw422016, id)
	//line board.qtpl:51
	streamsubmit(qw422016, false)
	//line board.qtpl:51
	qw422016.N().S(`</form></aside><aside id="refresh" class="act glass noscript-hide"><a>`)
	//line board.qtpl:56
	qw422016.N().S(ln.Common.UI["refresh"])
	//line board.qtpl:56
	qw422016.N().S(`</a></aside>`)
	//line board.qtpl:59
	streamcatalogLink(qw422016, catalog)
	//line board.qtpl:60
	if !catalog {
		//line board.qtpl:61
		streampagination(qw422016, page, total)
		//line board.qtpl:62
	}
	//line board.qtpl:63
	streamhoverReveal(qw422016, "aside", conf.Notice, ln.Common.UI["showNotice"])
	//line board.qtpl:64
	streamhoverReveal(qw422016, "aside", conf.Rules, ln.Common.UI["rules"])
	//line board.qtpl:64
	qw422016.N().S(`<span id="catalog-controls" class="margin-spaced noscript-hide"><input type="text" name="search" placeholder="`)
	//line board.qtpl:66
	qw422016.N().S(ln.Common.UI["search"])
	//line board.qtpl:66
	qw422016.N().S(`" title="`)
	//line board.qtpl:66
	qw422016.N().S(ln.UI["searchTooltip"])
	//line board.qtpl:66
	qw422016.N().S(`">`)
	//line board.qtpl:67
	if catalog {
		//line board.qtpl:67
		qw422016.N().S(`<select name="sortMode">`)
		//line board.qtpl:69
		for i, s := range [...]string{"bump", "lastReply", "creation", "replyCount", "fileCount"} {
			//line board.qtpl:69
			qw422016.N().S(`<option value="`)
			//line board.qtpl:70
			qw422016.N().S(s)
			//line board.qtpl:70
			qw422016.N().S(`">`)
			//line board.qtpl:71
			qw422016.N().S(ln.SortModes[i])
			//line board.qtpl:71
			qw422016.N().S(`</option>`)
			//line board.qtpl:73
		}
		//line board.qtpl:73
		qw422016.N().S(`</select>`)
		//line board.qtpl:75
	}
	//line board.qtpl:75
	qw422016.N().S(`</span></span><hr>`)
	//line board.qtpl:79
	qw422016.N().Z(threadHTML)
	//line board.qtpl:79
	qw422016.N().S(`<script id="board-configs" type="application/json">`)
	//line board.qtpl:81
	qw422016.N().Z(conf.JSON)
	//line board.qtpl:81
	qw422016.N().S(`</script><hr><span class="aside-container">`)
	//line board.qtpl:85
	streamcatalogLink(qw422016, catalog)
	//line board.qtpl:86
	if !catalog {
		//line board.qtpl:87
		streampagination(qw422016, page, total)
		//line board.qtpl:88
	}
	//line board.qtpl:88
	qw422016.N().S(`</span>`)
	//line board.qtpl:90
	streamloadingImage(qw422016, conf.ID)
//line board.qtpl:91
}

//line board.qtpl:91
func writerenderBoard(qq422016 qtio422016.Writer, threadHTML []byte, id, title string, conf config.BoardConfContainer, page, total int, pos auth.ModerationLevel, catalog bool) {
	//line board.qtpl:91
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:91
	streamrenderBoard(qw422016, threadHTML, id, title, conf, page, total, pos, catalog)
	//line board.qtpl:91
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:91
}

//line board.qtpl:91
func renderBoard(threadHTML []byte, id, title string, conf config.BoardConfContainer, page, total int, pos auth.ModerationLevel, catalog bool) string {
	//line board.qtpl:91
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:91
	writerenderBoard(qb422016, threadHTML, id, title, conf, page, total, pos, catalog)
	//line board.qtpl:91
	qs422016 := string(qb422016.B)
	//line board.qtpl:91
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:91
	return qs422016
//line board.qtpl:91
}

// CatalogThreads renders thread content for a catalog page. Separate function to
// allow caching of generated posts.

//line board.qtpl:95
func StreamCatalogThreads(qw422016 *qt422016.Writer, b []common.Thread, json []byte) {
	//line board.qtpl:95
	qw422016.N().S(`<div id="catalog">`)
	//line board.qtpl:97
	for _, t := range b {
		//line board.qtpl:98
		boardConfig := config.GetBoardConfigs(t.Board)

		//line board.qtpl:99
		idStr := strconv.FormatUint(t.ID, 10)

		//line board.qtpl:100
		hasImage := t.Image != nil && t.Image.ThumbType != common.NoFile

		//line board.qtpl:100
		qw422016.N().S(`<article id="p`)
		//line board.qtpl:101
		qw422016.N().S(idStr)
		//line board.qtpl:101
		qw422016.N().S(`"`)
		//line board.qtpl:101
		qw422016.N().S(` `)
		//line board.qtpl:101
		streampostClass(qw422016, t.Post, t.ID)
		//line board.qtpl:101
		qw422016.N().S(` `)
		//line board.qtpl:101
		qw422016.N().S(`data-id="`)
		//line board.qtpl:101
		qw422016.N().S(idStr)
		//line board.qtpl:101
		qw422016.N().S(`">`)
		//line board.qtpl:102
		streamdeletedToggle(qw422016)
		//line board.qtpl:103
		if hasImage {
			//line board.qtpl:103
			qw422016.N().S(`<figure>`)
			//line board.qtpl:105
			img := *t.Image

			//line board.qtpl:105
			qw422016.N().S(`<a href="/`)
			//line board.qtpl:106
			qw422016.N().S(t.Board)
			//line board.qtpl:106
			qw422016.N().S(`/`)
			//line board.qtpl:106
			qw422016.N().S(idStr)
			//line board.qtpl:106
			qw422016.N().S(`">`)
			//line board.qtpl:107
			if img.Spoiler {
				//line board.qtpl:107
				qw422016.N().S(`<img src="/assets/spoil/default.jpg" width="150" height="150" class="catalog">`)
				//line board.qtpl:109
			} else {
				//line board.qtpl:109
				qw422016.N().S(`<img width="`)
				//line board.qtpl:110
				qw422016.N().S(strconv.FormatUint(uint64(img.Dims[2]), 10))
				//line board.qtpl:110
				qw422016.N().S(`" height="`)
				//line board.qtpl:110
				qw422016.N().S(strconv.FormatUint(uint64(img.Dims[3]), 10))
				//line board.qtpl:110
				qw422016.N().S(`" class="catalog" src="`)
				//line board.qtpl:110
				qw422016.N().S(assets.ThumbPath(img.ThumbType, img.SHA1))
				//line board.qtpl:110
				qw422016.N().S(`">`)
				//line board.qtpl:111
			}
			//line board.qtpl:111
			qw422016.N().S(`</a></figure>`)
			//line board.qtpl:114
		}
		//line board.qtpl:114
		qw422016.N().S(`<span class="spaced thread-links hide-empty"><b class="board">/`)
		//line board.qtpl:117
		qw422016.N().S(t.Board)
		//line board.qtpl:117
		qw422016.N().S(`/</b><span class="counters">`)
		//line board.qtpl:120
		qw422016.N().S(strconv.FormatUint(uint64(t.PostCtr), 10))
		//line board.qtpl:120
		qw422016.N().S(`/`)
		//line board.qtpl:122
		qw422016.N().S(strconv.FormatUint(uint64(t.ImageCtr), 10))
		//line board.qtpl:122
		qw422016.N().S(`</span>`)
		//line board.qtpl:124
		if !hasImage {
			//line board.qtpl:125
			streamexpandLink(qw422016, t.Board, idStr)
			//line board.qtpl:126
		}
		//line board.qtpl:127
		streamlast100Link(qw422016, t.Board, idStr)
		//line board.qtpl:128
		streamthreadWatcherToggle(qw422016, t.ID)
		//line board.qtpl:128
		qw422016.N().S(`</span><br><h3>「`)
		//line board.qtpl:132
		qw422016.E().S(t.Subject)
		//line board.qtpl:132
		qw422016.N().S(`」</h3><blockquote>`)
		//line board.qtpl:135
		streambody(qw422016, t.Post, t.ID, t.Board, false, boardConfig.RbText, boardConfig.Pyu)
		//line board.qtpl:135
		qw422016.N().S(`</blockquote></article>`)
		//line board.qtpl:138
	}
	//line board.qtpl:138
	qw422016.N().S(`<script id="post-data" type="application/json">`)
	//line board.qtpl:140
	qw422016.N().Z(json)
	//line board.qtpl:140
	qw422016.N().S(`</script></div>`)
//line board.qtpl:143
}

//line board.qtpl:143
func WriteCatalogThreads(qq422016 qtio422016.Writer, b []common.Thread, json []byte) {
	//line board.qtpl:143
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:143
	StreamCatalogThreads(qw422016, b, json)
	//line board.qtpl:143
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:143
}

//line board.qtpl:143
func CatalogThreads(b []common.Thread, json []byte) string {
	//line board.qtpl:143
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:143
	WriteCatalogThreads(qb422016, b, json)
	//line board.qtpl:143
	qs422016 := string(qb422016.B)
	//line board.qtpl:143
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:143
	return qs422016
//line board.qtpl:143
}

// IndexThreads renders abbreviated threads for display on board index pages

//line board.qtpl:146
func StreamIndexThreads(qw422016 *qt422016.Writer, threads []common.Thread, json []byte) {
	//line board.qtpl:147
	root := config.Get().RootURL

	//line board.qtpl:148
	bls := extractBacklinks(15*6, threads...)

	//line board.qtpl:148
	qw422016.N().S(`<div id="index-thread-container">`)
	//line board.qtpl:150
	for _, t := range threads {
		//line board.qtpl:151
		idStr := strconv.FormatUint(t.ID, 10)

		//line board.qtpl:151
		qw422016.N().S(`<section class="index-thread`)
		//line board.qtpl:152
		if t.IsDeleted() {
			//line board.qtpl:152
			qw422016.N().S(` `)
			//line board.qtpl:152
			qw422016.N().S(`deleted`)
			//line board.qtpl:152
		}
		//line board.qtpl:152
		qw422016.N().S(`" data-id="`)
		//line board.qtpl:152
		qw422016.N().S(idStr)
		//line board.qtpl:152
		qw422016.N().S(`">`)
		//line board.qtpl:153
		streamdeletedToggle(qw422016)
		//line board.qtpl:154
		streamrenderThreadPosts(qw422016, t, bls, root, true)
		//line board.qtpl:154
		qw422016.N().S(`<hr></section>`)
		//line board.qtpl:157
	}
	//line board.qtpl:157
	qw422016.N().S(`<script id="post-data" type="application/json">`)
	//line board.qtpl:159
	qw422016.N().Z(json)
	//line board.qtpl:159
	qw422016.N().S(`</script>`)
	//line board.qtpl:161
	streamencodeBacklinks(qw422016, bls)
	//line board.qtpl:161
	qw422016.N().S(`</div>`)
//line board.qtpl:163
}

//line board.qtpl:163
func WriteIndexThreads(qq422016 qtio422016.Writer, threads []common.Thread, json []byte) {
	//line board.qtpl:163
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:163
	StreamIndexThreads(qw422016, threads, json)
	//line board.qtpl:163
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:163
}

//line board.qtpl:163
func IndexThreads(threads []common.Thread, json []byte) string {
	//line board.qtpl:163
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:163
	WriteIndexThreads(qb422016, threads, json)
	//line board.qtpl:163
	qs422016 := string(qb422016.B)
	//line board.qtpl:163
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:163
	return qs422016
//line board.qtpl:163
}

// Render noscript-specific post creation fields

//line board.qtpl:166
func streamnoscriptPostCreationFields(qw422016 *qt422016.Writer, pos auth.ModerationLevel) {
	//line board.qtpl:167
	ln := lang.Get()

	//line board.qtpl:168
	if pos > auth.NotStaff {
		//line board.qtpl:169
		streaminput(qw422016, staffTitleSpec.wrap(), ln)
		//line board.qtpl:170
	}
	//line board.qtpl:171
	for _, s := range specs["noscriptPostCreation"] {
		//line board.qtpl:172
		streaminput(qw422016, s, ln)
		//line board.qtpl:173
	}
//line board.qtpl:174
}

//line board.qtpl:174
func writenoscriptPostCreationFields(qq422016 qtio422016.Writer, pos auth.ModerationLevel) {
	//line board.qtpl:174
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:174
	streamnoscriptPostCreationFields(qw422016, pos)
	//line board.qtpl:174
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:174
}

//line board.qtpl:174
func noscriptPostCreationFields(pos auth.ModerationLevel) string {
	//line board.qtpl:174
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:174
	writenoscriptPostCreationFields(qb422016, pos)
	//line board.qtpl:174
	qs422016 := string(qb422016.B)
	//line board.qtpl:174
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:174
	return qs422016
//line board.qtpl:174
}

// Render image upload form

//line board.qtpl:177
func streamuploadForm(qw422016 *qt422016.Writer) {
	//line board.qtpl:177
	qw422016.N().S(`<span class="upload-container"><span data-id="spoiler"><label><input type="checkbox" name="spoiler">`)
	//line board.qtpl:182
	qw422016.N().S(lang.Get().Common.Posts["spoiler"])
	//line board.qtpl:182
	qw422016.N().S(`</label></span><br><input type="file" name="image" accept="image/png, image/gif, image/jpeg, video/webm, video/ogg, audio/ogg, application/ogg, video/mp4, audio/mp4, audio/mp3, application/zip, application/x-7z-compressed, application/x-xz, application/x-gzip, audio/x-flac, text/plain, application/pdf, video/quicktime, audio/x-flac"><br></span>`)
//line board.qtpl:189
}

//line board.qtpl:189
func writeuploadForm(qq422016 qtio422016.Writer) {
	//line board.qtpl:189
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:189
	streamuploadForm(qw422016)
	//line board.qtpl:189
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:189
}

//line board.qtpl:189
func uploadForm() string {
	//line board.qtpl:189
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:189
	writeuploadForm(qb422016)
	//line board.qtpl:189
	qs422016 := string(qb422016.B)
	//line board.qtpl:189
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:189
	return qs422016
//line board.qtpl:189
}

// Link to catalog or board page

//line board.qtpl:192
func streamcatalogLink(qw422016 *qt422016.Writer, catalog bool) {
	//line board.qtpl:193
	ln := lang.Get().Common.UI

	//line board.qtpl:193
	qw422016.N().S(`<aside class="act glass">`)
	//line board.qtpl:195
	if catalog {
		//line board.qtpl:195
		qw422016.N().S(`<a href=".">`)
		//line board.qtpl:197
		qw422016.N().S(ln["return"])
		//line board.qtpl:197
		qw422016.N().S(`</a>`)
		//line board.qtpl:199
	} else {
		//line board.qtpl:199
		qw422016.N().S(`<a href="catalog">`)
		//line board.qtpl:201
		qw422016.N().S(ln["catalog"])
		//line board.qtpl:201
		qw422016.N().S(`</a>`)
		//line board.qtpl:203
	}
	//line board.qtpl:203
	qw422016.N().S(`</aside>`)
//line board.qtpl:205
}

//line board.qtpl:205
func writecatalogLink(qq422016 qtio422016.Writer, catalog bool) {
	//line board.qtpl:205
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:205
	streamcatalogLink(qw422016, catalog)
	//line board.qtpl:205
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:205
}

//line board.qtpl:205
func catalogLink(catalog bool) string {
	//line board.qtpl:205
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:205
	writecatalogLink(qb422016, catalog)
	//line board.qtpl:205
	qs422016 := string(qb422016.B)
	//line board.qtpl:205
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:205
	return qs422016
//line board.qtpl:205
}

// Links to different pages of the board index

//line board.qtpl:208
func streampagination(qw422016 *qt422016.Writer, page, total int) {
	//line board.qtpl:208
	qw422016.N().S(`<aside class="glass spaced">`)
	//line board.qtpl:210
	if page != 0 {
		//line board.qtpl:211
		if page-1 != 0 {
			//line board.qtpl:212
			streampageLink(qw422016, 0, "<<")
			//line board.qtpl:213
		}
		//line board.qtpl:214
		streampageLink(qw422016, page-1, "<")
		//line board.qtpl:215
	}
	//line board.qtpl:216
	for i := 0; i < total; i++ {
		//line board.qtpl:217
		if i != page {
			//line board.qtpl:218
			streampageLink(qw422016, i, strconv.Itoa(i))
			//line board.qtpl:219
		} else {
			//line board.qtpl:219
			qw422016.N().S(`<b>`)
			//line board.qtpl:221
			qw422016.N().D(i)
			//line board.qtpl:221
			qw422016.N().S(`</b>`)
			//line board.qtpl:223
		}
		//line board.qtpl:224
	}
	//line board.qtpl:225
	if page != total-1 {
		//line board.qtpl:226
		streampageLink(qw422016, page+1, ">")
		//line board.qtpl:227
		if page+1 != total-1 {
			//line board.qtpl:228
			streampageLink(qw422016, total-1, ">>")
			//line board.qtpl:229
		}
		//line board.qtpl:230
	}
	//line board.qtpl:230
	qw422016.N().S(`</aside>`)
//line board.qtpl:232
}

//line board.qtpl:232
func writepagination(qq422016 qtio422016.Writer, page, total int) {
	//line board.qtpl:232
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:232
	streampagination(qw422016, page, total)
	//line board.qtpl:232
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:232
}

//line board.qtpl:232
func pagination(page, total int) string {
	//line board.qtpl:232
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:232
	writepagination(qb422016, page, total)
	//line board.qtpl:232
	qs422016 := string(qb422016.B)
	//line board.qtpl:232
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:232
	return qs422016
//line board.qtpl:232
}

// Link to a different paginated board page

//line board.qtpl:235
func streampageLink(qw422016 *qt422016.Writer, i int, text string) {
	//line board.qtpl:235
	qw422016.N().S(`<a href="?page=`)
	//line board.qtpl:236
	qw422016.N().D(i)
	//line board.qtpl:236
	qw422016.N().S(`">`)
	//line board.qtpl:237
	qw422016.N().S(text)
	//line board.qtpl:237
	qw422016.N().S(`</a>`)
//line board.qtpl:239
}

//line board.qtpl:239
func writepageLink(qq422016 qtio422016.Writer, i int, text string) {
	//line board.qtpl:239
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line board.qtpl:239
	streampageLink(qw422016, i, text)
	//line board.qtpl:239
	qt422016.ReleaseWriter(qw422016)
//line board.qtpl:239
}

//line board.qtpl:239
func pageLink(i int, text string) string {
	//line board.qtpl:239
	qb422016 := qt422016.AcquireByteBuffer()
	//line board.qtpl:239
	writepageLink(qb422016, i, text)
	//line board.qtpl:239
	qs422016 := string(qb422016.B)
	//line board.qtpl:239
	qt422016.ReleaseByteBuffer(qb422016)
	//line board.qtpl:239
	return qs422016
//line board.qtpl:239
}
