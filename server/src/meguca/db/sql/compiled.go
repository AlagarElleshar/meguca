// Code generated by go-bindata.
// sources:
// compiled.go
// functions/bump_thread.sql
// functions/insert_image.sql
// functions/post_count.sql
// functions/post_op.sql
// functions/use_image_token.sql
// sql.go
// triggers/boards.sql
// triggers/mod_log.sql
// triggers/posts.sql
// triggers/threads.sql
// DO NOT EDIT!

package sql

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledGo = []byte(``)

func compiledGoBytes() ([]byte, error) {
	return _compiledGo, nil
}

func compiledGo() (*asset, error) {
	bytes, err := compiledGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _functionsBump_threadSql = []byte(`create function bump_thread(op bigint, bump_time bool = false) returns void
as $$
declare
	now_unix bigint := extract(epoch from now());
begin
	update threads
		set replyTime = now_unix
		where id = op;
	if bump_thread.bump_time and post_count(bump_thread.op) < 5000 then
		update threads
			set bumpTime = now_unix
			where id = bump_thread.op;
	end if;
end;
$$ language plpgsql;
`)

func functionsBump_threadSqlBytes() ([]byte, error) {
	return _functionsBump_threadSql, nil
}

func functionsBump_threadSql() (*asset, error) {
	bytes, err := functionsBump_threadSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions/bump_thread.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _functionsInsert_imageSql = []byte(`-- Inserts image into existing post and return image json
create function insert_image(post_id bigint, token char(86), name varchar(200),
	spoiler bool)
returns jsonb as $$
declare
	image_id char(40);
	data jsonb;
begin
	update posts
		set sha1 = use_image_token(insert_image.token),
			imageName = insert_image.name,
			spoiler = insert_image.spoiler
		where id = post_id
		returning posts.sha1 into image_id;
	if image_id is null then
		raise exception 'post not found';
	end if;

	select to_jsonb(i) into data
		from images i
		where i.sha1 = image_id;
	return data || jsonb_build_object(
		'id', post_id,
		'spoiler', spoiler,
		'name', name);
end;
$$ language plpgsql;
`)

func functionsInsert_imageSqlBytes() ([]byte, error) {
	return _functionsInsert_imageSql, nil
}

func functionsInsert_imageSql() (*asset, error) {
	bytes, err := functionsInsert_imageSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions/insert_image.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _functionsPost_countSql = []byte(`create function post_count(op bigint)
returns bigint as $$
declare
	c bigint;
begin
	select count(*) into c
		from posts
		where posts.op = post_count.op;
	return c;
end;
$$ language plpgsql;
`)

func functionsPost_countSqlBytes() ([]byte, error) {
	return _functionsPost_countSql, nil
}

func functionsPost_countSql() (*asset, error) {
	bytes, err := functionsPost_countSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions/post_count.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _functionsPost_opSql = []byte(`create function post_op(id bigint)
returns bigint as $$
declare
	op bigint;
begin
	select op into op
		from posts
		where id = post_op.id;
	return op;
end;
$$ language plpgsql;
`)

func functionsPost_opSqlBytes() ([]byte, error) {
	return _functionsPost_opSql, nil
}

func functionsPost_opSql() (*asset, error) {
	bytes, err := functionsPost_opSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions/post_op.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _functionsUse_image_tokenSql = []byte(`-- Uses up an image allocation token and returns the image's ID
create function use_image_token(token char(86))
returns char(40) as $$
declare
	sha1 char(40);
begin
	delete from image_tokens
		where image_tokens.token = use_image_token.token
		returning image_tokens.sha1 into sha1;
	if sha1 is null then
		raise exception 'invalid image token';
	end if;
	return sha1;
end;
$$ language plpgsql;
`)

func functionsUse_image_tokenSqlBytes() ([]byte, error) {
	return _functionsUse_image_tokenSql, nil
}

func functionsUse_image_tokenSql() (*asset, error) {
	bytes, err := functionsUse_image_tokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions/use_image_token.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlGo = []byte(`//go:generate go-bindata -o compiled.go --pkg sql --nometadata -nocompress ./...
package sql
`)

func sqlGoBytes() ([]byte, error) {
	return _sqlGo, nil
}

func sqlGo() (*asset, error) {
	bytes, err := sqlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _triggersBoardsSql = []byte(`create or replace function on_boards_insert()
returns trigger as $$
begin
	perform pg_notify('board_updated', new.id);
	return null;
end;
$$ language plpgsql;

create or replace function on_boards_update()
returns trigger as $$
begin
	perform pg_notify('board_updated', new.id);
	return null;
end;
$$ language plpgsql;

create or replace function on_boards_delete()
returns trigger as $$
begin
	perform pg_notify('board_updated', old.id);
	return null;
end;
$$ language plpgsql;
`)

func triggersBoardsSqlBytes() ([]byte, error) {
	return _triggersBoardsSql, nil
}

func triggersBoardsSql() (*asset, error) {
	bytes, err := triggersBoardsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "triggers/boards.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _triggersMod_logSql = []byte(`create or replace function on_mod_log_insert()
returns trigger as $$
declare
	op bigint;
begin
	if new.post_id != 0 then
		insert into post_moderation (post_id, type, "by", length, data)
			values (new.post_id, new.type, new."by", new.length, new.data);
		update posts
			set moderated = true
			where id = new.post_id
			returning posts.op into op;
		perform pg_notify('post_moderated',
			concat_ws(',', op, new.id));
	end if;
	return null;
end;
$$ language plpgsql;
`)

func triggersMod_logSqlBytes() ([]byte, error) {
	return _triggersMod_logSql, nil
}

func triggersMod_logSql() (*asset, error) {
	bytes, err := triggersMod_logSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "triggers/mod_log.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _triggersPostsSql = []byte(`create or replace function on_posts_insert()
returns trigger as $$
begin
	perform bump_thread(new.op, not new.sage);
	perform pg_notify('new_post_in_thread',
		new.op || ',' || post_count(new.op));
	return null;
end;
$$ language plpgsql;

create or replace function on_posts_update()
returns trigger as $$
begin
	perform bump_thread(new.op);
	return null;
end;
$$ language plpgsql;
`)

func triggersPostsSqlBytes() ([]byte, error) {
	return _triggersPostsSql, nil
}

func triggersPostsSql() (*asset, error) {
	bytes, err := triggersPostsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "triggers/posts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _triggersThreadsSql = []byte(`create or replace function on_threads_insert()
returns trigger as $$
begin
	perform bump_thread(new.id);

	-- Init Russian roulette
	insert into roulette (id, scount, rcount) values (new.id, 6, 0);

	return null;
end;
$$ language plpgsql;

create or replace function on_threads_update()
returns trigger as $$
begin
	-- Prevent infinite recursion on timestamp updates
	if new.replyTime != old.replyTime then
		perform bump_thread(new.id);
	end if;
	return null;
end;
$$ language plpgsql;

create or replace function on_threads_delete()
returns trigger as $$
begin
	perform pg_notify('thread_deleted', old.board || ',' || old.id);
	return null;
end;
$$ language plpgsql;
`)

func triggersThreadsSqlBytes() ([]byte, error) {
	return _triggersThreadsSql, nil
}

func triggersThreadsSql() (*asset, error) {
	bytes, err := triggersThreadsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "triggers/threads.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled.go": compiledGo,
	"functions/bump_thread.sql": functionsBump_threadSql,
	"functions/insert_image.sql": functionsInsert_imageSql,
	"functions/post_count.sql": functionsPost_countSql,
	"functions/post_op.sql": functionsPost_opSql,
	"functions/use_image_token.sql": functionsUse_image_tokenSql,
	"sql.go": sqlGo,
	"triggers/boards.sql": triggersBoardsSql,
	"triggers/mod_log.sql": triggersMod_logSql,
	"triggers/posts.sql": triggersPostsSql,
	"triggers/threads.sql": triggersThreadsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled.go": &bintree{compiledGo, map[string]*bintree{}},
	"functions": &bintree{nil, map[string]*bintree{
		"bump_thread.sql": &bintree{functionsBump_threadSql, map[string]*bintree{}},
		"insert_image.sql": &bintree{functionsInsert_imageSql, map[string]*bintree{}},
		"post_count.sql": &bintree{functionsPost_countSql, map[string]*bintree{}},
		"post_op.sql": &bintree{functionsPost_opSql, map[string]*bintree{}},
		"use_image_token.sql": &bintree{functionsUse_image_tokenSql, map[string]*bintree{}},
	}},
	"sql.go": &bintree{sqlGo, map[string]*bintree{}},
	"triggers": &bintree{nil, map[string]*bintree{
		"boards.sql": &bintree{triggersBoardsSql, map[string]*bintree{}},
		"mod_log.sql": &bintree{triggersMod_logSql, map[string]*bintree{}},
		"posts.sql": &bintree{triggersPostsSql, map[string]*bintree{}},
		"threads.sql": &bintree{triggersThreadsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

